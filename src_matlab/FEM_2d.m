function FEM_2d(mshfile, boundaryfile, ppmshfile)

[Surf Line Via] = LoadB_2d(boundaryfile);

Material = Surf';

% copper resistivity 
ro_Cu = 1.7e-8;

tic;
% read the mesh file generated by Gmesh
[MeshFormat NodeCor EleList] = LoadMeshFile(mshfile);

tRF = toc;
fprintf('Time for reading the File: %.2f s!\n',tRF);
:


%Triangular list
LineEle = EleList.LineEle;
TriEle = EleList.TriEle;

% read the nodes for all the triangles at surface
LineNode = LineEle(:,[4 6:7]);
TriEleNode = TriEle(:,[4 6:8]);  


% NodeCor is the node coornidates, we adjust the node coornidate to micro
% unit (10^-6 unit). Node_Num is the number of nodes.
Node_Num = size(NodeCor,1);
NodeCor = NodeCor*10^-6;

tic;
% generate matrix for surface mesh
KBDB_2d = BDB_2d(Node_Num, TriEle, NodeCor, Material);

% connect surfaces with vias
KBDB_2d = via_1d(Via, KBDB_2d, NodeCor, LineEle);

tSF = toc;
fprintf('Time for building finite element matrix K: %.2f s!\n',tSF);

tic;
K = KBDB_2d;
f = sparse(Node_Num,1);

[a, b_num] = size(Line);

for i = 1:b_num
    [K f] = boundary_2d(LineEle, K, f, Line(1,i), Line(2,i));
end

Volt = K\f;

NodeCor(:,5) = Volt;

% find the neighbor nodes for each node in the FEM so that we can compute
% the dV/dr, 
NodeSet = GroupNodes_2d(TriEleNode, LineNode, Node_Num);

% Then compute the dV/dr 
EList = GetEList(NodeSet, NodeCor, Node_Num); 

% compute the current density = E/rho, rho is copper resistivity.
EList = EList / ro_Cu;  

TimeStep = 0;

vfile = strcat(ppmshfile, 'v');
PostFile1(Node_Num,mshfile,TimeStep,Volt,vfile);
PostFileO(Node_Num,mshfile,TimeStep,EList(:,4), ppmshfile);

